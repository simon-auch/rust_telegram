#parses types of the form Array of Array of Type into Vec<Vec<type>>
def parse_type(text):
    split_type = text.split(" ")
    if len(split_type) == 1:
        return split_type[0]
    if len(split_type) > 2 and split_type[0] == "Array" and split_type[1] == "of":
        rec = parse_type(" ".join(split_type[2:]))
        return "Vec<"+rec+">"
    if split_type == ["Float","number"]:
        return "Float"
    if len(split_type) > 2 and split_type[1] == "or":
        rec = parse_type(" ".join(split_type[2:]))
        return "Or<"+split_type[0]+","+rec+">";
    if len(split_type) > 2 and split_type[1] == "and":
        return ""
    print("unsupported type: ",text)
    panic()

def make_struct(name, description_raw, fields_raw):
    struct = "".join(["///"+line+"\n" for line in description_raw])
    struct += "#[derive(Serialize, Deserialize, Builder, Clone)]\n"
    struct += "#[builder(setter(strip_option))]\n"
    struct += "pub struct "+name+"{\n"
    fields = []
    for field in fields_raw:
        split = field.split(" \t", 2)
        if len(split) != 3:
            #couldnt interpret line as type, add id as comment to the previous item
            fields.insert(len(fields)-2, "///"+field)
            continue
        #construct the type
        vartype = parse_type(split[1])
        fields.append("///"+split[2])

        varname = split[0]
        if varname in ["type"]:
            fields.append("#[serde(rename = \"type\")]")
            varname+="_"

        if split[2].startswith("Optional."):
            fields.append("#[builder(default)]")
            fields.append("#[serde(skip_serializing_if = \"Option::is_none\")]")
            vartype = "Option<"+vartype+">"

        fields.append("pub "+varname+":"+vartype+",")
    struct += "    "+"\n    ".join(fields)+"\n"
    struct += "}"
    print(struct)

def make_structs(lines):
    anchors = []
    for i in range(len(lines)):
        if lines[i] == "Field 	Type 	Description":
            anchors.append(i)
    #names = []
    #for anchor in anchors:
    #    j = anchor-1
    #    while lines[j] == "" or " " in lines[j]:
    #        j-=1
    #    names.append(j)
    fields_start=[]
    for anchor in anchors:
        fields_start.append(anchor+1)
    #fields_end=[]
    #for name in names:
    #    if name != 0:
    #        fields_end.append(name)
    #fields_end.append(len(lines))
    fields_end = []
    for anchor in anchors:
        j = anchor+1
        while j < len(lines) and (lines[j] == "" or " " in lines[j]):
            j+=1
        fields_end.append(j)
    names = [0]
    for end in fields_end:
        names.append(end)
    names.pop()
    
    for i in range(len(anchors)):
        make_struct(lines[names[i]],lines[names[i]+1:anchors[i]], lines[fields_start[i]:fields_end[i]])

def call_make_structs():
    print("use serde::{Serialize,Deserialize};")
    print("use crate::helpers::Or;")
    print("type Integer=i64;")
    print("type Boolean=bool;")
    print("type True=bool;")
    print("type Float=f64;")

    print("//unsupported types")
    print("type ShippingQuery = ();")
    print("type PreCheckoutQuery = ();")
    print("type PassportData = ();")
    print("type Invoice = ();")
    print("type SuccessfulPayment = ();")
    print("type Game = ();")
    print("type Sticker = ();")
    print("type CallbackGame = ();")
    print("type InputFile = ();")
    make_structs([
    "WebhookInfo",
    "",
    "Contains information about the current status of a webhook.",
    "Field 	Type 	Description",
    "url 	String 	Webhook URL, may be empty if webhook is not set up",
    "has_custom_certificate 	Boolean 	True, if a custom certificate was provided for webhook certificate checks",
    "pending_update_count 	Integer 	Number of updates awaiting delivery",
    "last_error_date 	Integer 	Optional. Unix time for the most recent error that happened when trying to deliver an update via webhook",
    "last_error_message 	String 	Optional. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook",
    "max_connections 	Integer 	Optional. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery",
    "allowed_updates 	Array of String 	Optional. A list of update types the bot is subscribed to. Defaults to all update types",
    "InlineQuery",
    "",
    "This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.",
    "Field 	Type 	Description",
    "id 	String 	Unique identifier for this query",
    "from 	User 	Sender",
    "location 	Location 	Optional. Sender location, only for bots that request user location",
    "query 	String 	Text of the query (up to 512 characters)",
    "offset 	String 	Offset of the results to be returned, can be controlled by the bot",
    "InlineQueryResultArticle",
    "",
    "Represents a link to an article or web page.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be article",
    "id 	String 	Unique identifier for this result, 1-64 Bytes",
    "title 	String 	Title of the result",
    "input_message_content 	InputMessageContent 	Content of the message to be sent",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "url 	String 	Optional. URL of the result",
    "hide_url 	Boolean 	Optional. Pass True, if you don't want the URL to be shown in the message",
    "description 	String 	Optional. Short description of the result",
    "thumb_url 	String 	Optional. Url of the thumbnail for the result",
    "thumb_width 	Integer 	Optional. Thumbnail width",
    "thumb_height 	Integer 	Optional. Thumbnail height",
    "InlineQueryResultPhoto",
    "",
    "Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be photo",
    "id 	String 	Unique identifier for this result, 1-64 bytes",
    "photo_url 	String 	A valid URL of the photo. Photo must be in jpeg format. Photo size must not exceed 5MB",
    "thumb_url 	String 	URL of the thumbnail for the photo",
    "photo_width 	Integer 	Optional. Width of the photo",
    "photo_height 	Integer 	Optional. Height of the photo",
    "title 	String 	Optional. Title for the result",
    "description 	String 	Optional. Short description of the result",
    "caption 	String 	Optional. Caption of the photo to be sent, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the photo",
    "InlineQueryResultGif",
    "",
    "Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be gif",
    "id 	String 	Unique identifier for this result, 1-64 bytes",
    "gif_url 	String 	A valid URL for the GIF file. File size must not exceed 1MB",
    "gif_width 	Integer 	Optional. Width of the GIF",
    "gif_height 	Integer 	Optional. Height of the GIF",
    "gif_duration 	Integer 	Optional. Duration of the GIF",
    "thumb_url 	String 	URL of the static thumbnail for the result (jpeg or gif)",
    "title 	String 	Optional. Title for the result",
    "caption 	String 	Optional. Caption of the GIF file to be sent, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the GIF animation",
    "InlineQueryResultMpeg4Gif",
    "",
    "Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be mpeg4_gif",
    "id 	String 	Unique identifier for this result, 1-64 bytes",
    "mpeg4_url 	String 	A valid URL for the MP4 file. File size must not exceed 1MB",
    "mpeg4_width 	Integer 	Optional. Video width",
    "mpeg4_height 	Integer 	Optional. Video height",
    "mpeg4_duration 	Integer 	Optional. Video duration",
    "thumb_url 	String 	URL of the static thumbnail (jpeg or gif) for the result",
    "title 	String 	Optional. Title for the result",
    "caption 	String 	Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the video animation",
    "InlineQueryResultVideo",
    "",
    "Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.",
    "",
    "    If an InlineQueryResultVideo message contains an embedded video (e.g., YouTube), you must replace its content using input_message_content.",
    "",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be video",
    "id 	String 	Unique identifier for this result, 1-64 bytes",
    "video_url 	String 	A valid URL for the embedded video player or video file",
    "mime_type 	String 	Mime type of the content of video url, “text/html” or “video/mp4”",
    "thumb_url 	String 	URL of the thumbnail (jpeg only) for the video",
    "title 	String 	Title for the result",
    "caption 	String 	Optional. Caption of the video to be sent, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "video_width 	Integer 	Optional. Video width",
    "video_height 	Integer 	Optional. Video height",
    "video_duration 	Integer 	Optional. Video duration in seconds",
    "description 	String 	Optional. Short description of the result",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the video. This field is required if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video).",
    "InlineQueryResultAudio",
    "",
    "Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be audio",
    "id 	String 	Unique identifier for this result, 1-64 bytes",
    "audio_url 	String 	A valid URL for the audio file",
    "title 	String 	Title",
    "caption 	String 	Optional. Caption, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "performer 	String 	Optional. Performer",
    "audio_duration 	Integer 	Optional. Audio duration in seconds",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the audio",
    "",
    "Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.",
    "InlineQueryResultVoice",
    "",
    "Represents a link to a voice recording in an .ogg container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the the voice message.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be voice",
    "id 	String 	Unique identifier for this result, 1-64 bytes",
    "voice_url 	String 	A valid URL for the voice recording",
    "title 	String 	Recording title",
    "caption 	String 	Optional. Caption, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "voice_duration 	Integer 	Optional. Recording duration in seconds",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the voice recording",
    "",
    "Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.",
    "InlineQueryResultDocument",
    "",
    "Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file. Currently, only .PDF and .ZIP files can be sent using this method.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be document",
    "id 	String 	Unique identifier for this result, 1-64 bytes",
    "title 	String 	Title for the result",
    "caption 	String 	Optional. Caption of the document to be sent, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "document_url 	String 	A valid URL for the file",
    "mime_type 	String 	Mime type of the content of the file, either “application/pdf” or “application/zip”",
    "description 	String 	Optional. Short description of the result",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the file",
    "thumb_url 	String 	Optional. URL of the thumbnail (jpeg only) for the file",
    "thumb_width 	Integer 	Optional. Thumbnail width",
    "thumb_height 	Integer 	Optional. Thumbnail height",
    "",
    "Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.",
    "InlineQueryResultLocation",
    "",
    "Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the location.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be location",
    "id 	String 	Unique identifier for this result, 1-64 Bytes",
    "latitude 	Float number 	Location latitude in degrees",
    "longitude 	Float number 	Location longitude in degrees",
    "title 	String 	Location title",
    "live_period 	Integer 	Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the location",
    "thumb_url 	String 	Optional. Url of the thumbnail for the result",
    "thumb_width 	Integer 	Optional. Thumbnail width",
    "thumb_height 	Integer 	Optional. Thumbnail height",
    "",
    "Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.",
    "InlineQueryResultVenue",
    "",
    "Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the venue.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be venue",
    "id 	String 	Unique identifier for this result, 1-64 Bytes",
    "latitude 	Float 	Latitude of the venue location in degrees",
    "longitude 	Float 	Longitude of the venue location in degrees",
    "title 	String 	Title of the venue",
    "address 	String 	Address of the venue",
    "foursquare_id 	String 	Optional. Foursquare identifier of the venue if known",
    "foursquare_type 	String 	Optional. Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the venue",
    "thumb_url 	String 	Optional. Url of the thumbnail for the result",
    "thumb_width 	Integer 	Optional. Thumbnail width",
    "thumb_height 	Integer 	Optional. Thumbnail height",
    "",
    "Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.",
    "InlineQueryResultContact",
    "",
    "Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the contact.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be contact",
    "id 	String 	Unique identifier for this result, 1-64 Bytes",
    "phone_number 	String 	Contact's phone number",
    "first_name 	String 	Contact's first name",
    "last_name 	String 	Optional. Contact's last name",
    "vcard 	String 	Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the contact",
    "thumb_url 	String 	Optional. Url of the thumbnail for the result",
    "thumb_width 	Integer 	Optional. Thumbnail width",
    "thumb_height 	Integer 	Optional. Thumbnail height",
    "",
    "Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.",
    "InlineQueryResultGame",
    "",
    "Represents a Game.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be game",
    "id 	String 	Unique identifier for this result, 1-64 bytes",
    "game_short_name 	String 	Short name of the game",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "",
    "Note: This will only work in Telegram versions released after October 1, 2016. Older clients will not display any inline results if a game result is among them.",
    "InlineQueryResultCachedPhoto",
    "",
    "Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be photo",
    "id 	String 	Unique identifier for this result, 1-64 bytes",
    "photo_file_id 	String 	A valid file identifier of the photo",
    "title 	String 	Optional. Title for the result",
    "description 	String 	Optional. Short description of the result",
    "caption 	String 	Optional. Caption of the photo to be sent, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the photo",
    "InlineQueryResultCachedGif",
    "",
    "Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with specified content instead of the animation.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be gif",
    "id 	String 	Unique identifier for this result, 1-64 bytes",
    "gif_file_id 	String 	A valid file identifier for the GIF file",
    "title 	String 	Optional. Title for the result",
    "caption 	String 	Optional. Caption of the GIF file to be sent, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the GIF animation",
    "InlineQueryResultCachedMpeg4Gif",
    "",
    "Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be mpeg4_gif",
    "id 	String 	Unique identifier for this result, 1-64 bytes",
    "mpeg4_file_id 	String 	A valid file identifier for the MP4 file",
    "title 	String 	Optional. Title for the result",
    "caption 	String 	Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the video animation",
    "InlineQueryResultCachedSticker",
    "",
    "Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the sticker.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be sticker",
    "id 	String 	Unique identifier for this result, 1-64 bytes",
    "sticker_file_id 	String 	A valid file identifier of the sticker",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the sticker",
    "",
    "Note: This will only work in Telegram versions released after 9 April, 2016 for static stickers and after 06 July, 2019 for animated stickers. Older clients will ignore them.",
    "InlineQueryResultCachedDocument",
    "",
    "Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be document",
    "id 	String 	Unique identifier for this result, 1-64 bytes",
    "title 	String 	Title for the result",
    "document_file_id 	String 	A valid file identifier for the file",
    "description 	String 	Optional. Short description of the result",
    "caption 	String 	Optional. Caption of the document to be sent, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the file",
    "",
    "Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.",
    "InlineQueryResultCachedVideo",
    "",
    "Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be video",
    "id 	String 	Unique identifier for this result, 1-64 bytes",
    "video_file_id 	String 	A valid file identifier for the video file",
    "title 	String 	Title for the result",
    "description 	String 	Optional. Short description of the result",
    "caption 	String 	Optional. Caption of the video to be sent, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the video",
    "InlineQueryResultCachedVoice",
    "",
    "Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the voice message.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be voice",
    "id 	String 	Unique identifier for this result, 1-64 bytes",
    "voice_file_id 	String 	A valid file identifier for the voice message",
    "title 	String 	Voice message title",
    "caption 	String 	Optional. Caption, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the voice message",
    "",
    "Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.",
    "InlineQueryResultCachedAudio",
    "",
    "Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be audio",
    "id 	String 	Unique identifier for this result, 1-64 bytes",
    "audio_file_id 	String 	A valid file identifier for the audio file",
    "caption 	String 	Optional. Caption, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message",
    "input_message_content 	InputMessageContent 	Optional. Content of the message to be sent instead of the audio",
    "",
    "Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.",
    "InputMessageContent",
    "",
    "This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 4 types:",
    "",
    "    InputTextMessageContent",
    "    InputLocationMessageContent",
    "    InputVenueMessageContent",
    "    InputContactMessageContent",
    "",
    "InputTextMessageContent",
    "",
    "Represents the content of a text message to be sent as the result of an inline query.",
    "Field 	Type 	Description",
    "message_text 	String 	Text of the message to be sent, 1-4096 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message.",
    "disable_web_page_preview 	Boolean 	Optional. Disables link previews for links in the sent message",
    "InputLocationMessageContent",
    "",
    "Represents the content of a location message to be sent as the result of an inline query.",
    "Field 	Type 	Description",
    "latitude 	Float 	Latitude of the location in degrees",
    "longitude 	Float 	Longitude of the location in degrees",
    "live_period 	Integer 	Optional. Period in seconds for which the location can be updated, should be between 60 and 86400.",
    "InputVenueMessageContent",
    "",
    "Represents the content of a venue message to be sent as the result of an inline query.",
    "Field 	Type 	Description",
    "latitude 	Float 	Latitude of the venue in degrees",
    "longitude 	Float 	Longitude of the venue in degrees",
    "title 	String 	Name of the venue",
    "address 	String 	Address of the venue",
    "foursquare_id 	String 	Optional. Foursquare identifier of the venue, if known",
    "foursquare_type 	String 	Optional. Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)",
    "InputContactMessageContent",
    "",
    "Represents the content of a contact message to be sent as the result of an inline query.",
    "Field 	Type 	Description",
    "phone_number 	String 	Contact's phone number",
    "first_name 	String 	Contact's first name",
    "last_name 	String 	Optional. Contact's last name",
    "vcard 	String 	Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes",
    "ChosenInlineResult",
    "",
    "Represents a result of an inline query that was chosen by the user and sent to their chat partner.",
    "Field 	Type 	Description",
    "result_id 	String 	The unique identifier for the result that was chosen",
    "from 	User 	The user that chose the result",
    "location 	Location 	Optional. Sender location, only for bots that require user location",
    "inline_message_id 	String 	Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message.",
    "query 	String 	The query that was used to obtain the result",
    "",
    "Note: It is necessary to enable inline feedback via @Botfather in order to receive these objects in updates.",
    "Update",
    "",
    "This object represents an incoming update.",
    "At most one of the optional parameters can be present in any given update.",
    "Field 	Type 	Description",
    "update_id 	Integer 	The update‘s unique identifier. Update identifiers start from a certain positive number and increase sequentially. This ID becomes especially handy if you’re using Webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially.",
    "message 	Message 	Optional. New incoming message of any kind — text, photo, sticker, etc.",
    "edited_message 	Message 	Optional. New version of a message that is known to the bot and was edited",
    "channel_post 	Message 	Optional. New incoming channel post of any kind — text, photo, sticker, etc.",
    "edited_channel_post 	Message 	Optional. New version of a channel post that is known to the bot and was edited",
    "inline_query 	InlineQuery 	Optional. New incoming inline query",
    "chosen_inline_result 	ChosenInlineResult 	Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot.",
    "callback_query 	CallbackQuery 	Optional. New incoming callback query",
    "shipping_query 	ShippingQuery 	Optional. New incoming shipping query. Only for invoices with flexible price",
    "pre_checkout_query 	PreCheckoutQuery 	Optional. New incoming pre-checkout query. Contains full information about checkout",
    "poll 	Poll 	Optional. New poll state. Bots receive only updates about stopped polls and polls, which are sent by the bot",
    "User",
    "",
    "This object represents a Telegram user or bot.",
    "Field 	Type 	Description",
    "id 	Integer 	Unique identifier for this user or bot",
    "is_bot 	Boolean 	True, if this user is a bot",
    "first_name 	String 	User‘s or bot’s first name",
    "last_name 	String 	Optional. User‘s or bot’s last name",
    "username 	String 	Optional. User‘s or bot’s username",
    "language_code 	String 	Optional. IETF language tag of the user's language",
    "Chat",
    "",
    "This object represents a chat.",
    "Field 	Type 	Description",
    "id 	Integer 	Unique identifier for this chat. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.",
    "type 	String 	Type of chat, can be either “private”, “group”, “supergroup” or “channel”",
    "title 	String 	Optional. Title, for supergroups, channels and group chats",
    "username 	String 	Optional. Username, for private chats, supergroups and channels if available",
    "first_name 	String 	Optional. First name of the other party in a private chat",
    "last_name 	String 	Optional. Last name of the other party in a private chat",
    "photo 	ChatPhoto 	Optional. Chat photo. Returned only in getChat.",
    "description 	String 	Optional. Description, for groups, supergroups and channel chats. Returned only in getChat.",
    "invite_link 	String 	Optional. Chat invite link, for groups, supergroups and channel chats. Each administrator in a chat generates their own invite links, so the bot must first generate the link using exportChatInviteLink. Returned only in getChat.",
    "pinned_message 	Message 	Optional. Pinned message, for groups, supergroups and channels. Returned only in getChat.",
    "permissions 	ChatPermissions 	Optional. Default chat member permissions, for groups and supergroups. Returned only in getChat.",
    "sticker_set_name 	String 	Optional. For supergroups, name of group sticker set. Returned only in getChat.",
    "can_set_sticker_set 	Boolean 	Optional. True, if the bot can change the group sticker set. Returned only in getChat.",
    "Message",
    "",
    "This object represents a message.",
    "Field 	Type 	Description",
    "message_id 	Integer 	Unique message identifier inside this chat",
    "from 	User 	Optional. Sender, empty for messages sent to channels",
    "date 	Integer 	Date the message was sent in Unix time",
    "chat 	Chat 	Conversation the message belongs to",
    "forward_from 	User 	Optional. For forwarded messages, sender of the original message",
    "forward_from_chat 	Chat 	Optional. For messages forwarded from channels, information about the original channel",
    "forward_from_message_id 	Integer 	Optional. For messages forwarded from channels, identifier of the original message in the channel",
    "forward_signature 	String 	Optional. For messages forwarded from channels, signature of the post author if present",
    "forward_sender_name 	String 	Optional. Sender's name for messages forwarded from users who disallow adding a link to their account in forwarded messages",
    "forward_date 	Integer 	Optional. For forwarded messages, date the original message was sent in Unix time",
    "reply_to_message 	Message 	Optional. For replies, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply.",
    "edit_date 	Integer 	Optional. Date the message was last edited in Unix time",
    "media_group_id 	String 	Optional. The unique identifier of a media message group this message belongs to",
    "author_signature 	String 	Optional. Signature of the post author for messages in channels",
    "text 	String 	Optional. For text messages, the actual UTF-8 text of the message, 0-4096 characters.",
    "entities 	Array of MessageEntity 	Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text",
    "caption_entities 	Array of MessageEntity 	Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption",
    "audio 	Audio 	Optional. Message is an audio file, information about the file",
    "document 	Document 	Optional. Message is a general file, information about the file",
    "animation 	Animation 	Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set",
    "game 	Game 	Optional. Message is a game, information about the game. More about games »",
    "photo 	Array of PhotoSize 	Optional. Message is a photo, available sizes of the photo",
    "sticker 	Sticker 	Optional. Message is a sticker, information about the sticker",
    "video 	Video 	Optional. Message is a video, information about the video",
    "voice 	Voice 	Optional. Message is a voice message, information about the file",
    "video_note 	VideoNote 	Optional. Message is a video note, information about the video message",
    "caption 	String 	Optional. Caption for the animation, audio, document, photo, video or voice, 0-1024 characters",
    "contact 	Contact 	Optional. Message is a shared contact, information about the contact",
    "location 	Location 	Optional. Message is a shared location, information about the location",
    "venue 	Venue 	Optional. Message is a venue, information about the venue",
    "poll 	Poll 	Optional. Message is a native poll, information about the poll",
    "new_chat_members 	Array of User 	Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members)",
    "left_chat_member 	User 	Optional. A member was removed from the group, information about them (this member may be the bot itself)",
    "new_chat_title 	String 	Optional. A chat title was changed to this value",
    "new_chat_photo 	Array of PhotoSize 	Optional. A chat photo was change to this value",
    "delete_chat_photo 	True 	Optional. Service message: the chat photo was deleted",
    "group_chat_created 	True 	Optional. Service message: the group has been created",
    "supergroup_chat_created 	True 	Optional. Service message: the supergroup has been created. This field can‘t be received in a message coming through updates, because bot can’t be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup.",
    "channel_chat_created 	True 	Optional. Service message: the channel has been created. This field can‘t be received in a message coming through updates, because bot can’t be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel.",
    "migrate_to_chat_id 	Integer 	Optional. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.",
    "migrate_from_chat_id 	Integer 	Optional. The supergroup has been migrated from a group with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.",
    "pinned_message 	Message 	Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it is itself a reply.",
    "invoice 	Invoice 	Optional. Message is an invoice for a payment, information about the invoice. More about payments »",
    "successful_payment 	SuccessfulPayment 	Optional. Message is a service message about a successful payment, information about the payment. More about payments »",
    "connected_website 	String 	Optional. The domain name of the website on which the user has logged in. More about Telegram Login »",
    "passport_data 	PassportData 	Optional. Telegram Passport data",
    "reply_markup 	InlineKeyboardMarkup 	Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons.",
    "MessageEntity",
    "",
    "This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.",
    "Field 	Type 	Description",
    "type 	String 	Type of the entity. Can be mention (@username), hashtag, cashtag, bot_command, url, email, phone_number, bold (bold text), italic (italic text), code (monowidth string), pre (monowidth block), text_link (for clickable text URLs), text_mention (for users without usernames)",
    "offset 	Integer 	Offset in UTF-16 code units to the start of the entity",
    "length 	Integer 	Length of the entity in UTF-16 code units",
    "url 	String 	Optional. For “text_link” only, url that will be opened after user taps on the text",
    "user 	User 	Optional. For “text_mention” only, the mentioned user",
    "PhotoSize",
    "",
    "This object represents one size of a photo or a file / sticker thumbnail.",
    "Field 	Type 	Description",
    "file_id 	String 	Identifier for this file",
    "width 	Integer 	Photo width",
    "height 	Integer 	Photo height",
    "file_size 	Integer 	Optional. File size",
    "Audio",
    "",
    "This object represents an audio file to be treated as music by the Telegram clients.",
    "Field 	Type 	Description",
    "file_id 	String 	Identifier for this file",
    "duration 	Integer 	Duration of the audio in seconds as defined by sender",
    "performer 	String 	Optional. Performer of the audio as defined by sender or by audio tags",
    "title 	String 	Optional. Title of the audio as defined by sender or by audio tags",
    "mime_type 	String 	Optional. MIME type of the file as defined by sender",
    "file_size 	Integer 	Optional. File size",
    "thumb 	PhotoSize 	Optional. Thumbnail of the album cover to which the music file belongs",
    "Document",
    "",
    "This object represents a general file (as opposed to photos, voice messages and audio files).",
    "Field 	Type 	Description",
    "file_id 	String 	Identifier for this file",
    "thumb 	PhotoSize 	Optional. Document thumbnail as defined by sender",
    "file_name 	String 	Optional. Original filename as defined by sender",
    "mime_type 	String 	Optional. MIME type of the file as defined by sender",
    "file_size 	Integer 	Optional. File size",
    "Video",
    "",
    "This object represents a video file.",
    "Field 	Type 	Description",
    "file_id 	String 	Identifier for this file",
    "width 	Integer 	Video width as defined by sender",
    "height 	Integer 	Video height as defined by sender",
    "duration 	Integer 	Duration of the video in seconds as defined by sender",
    "thumb 	PhotoSize 	Optional. Video thumbnail",
    "mime_type 	String 	Optional. Mime type of a file as defined by sender",
    "file_size 	Integer 	Optional. File size",
    "Animation",
    "",
    "This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).",
    "Field 	Type 	Description",
    "file_id 	String 	Identifier for this file",
    "width 	Integer 	Video width as defined by sender",
    "height 	Integer 	Video height as defined by sender",
    "duration 	Integer 	Duration of the video in seconds as defined by sender",
    "thumb 	PhotoSize 	Optional. Animation thumbnail as defined by sender",
    "file_name 	String 	Optional. Original animation filename as defined by sender",
    "mime_type 	String 	Optional. MIME type of the file as defined by sender",
    "file_size 	Integer 	Optional. File size",
    "Voice",
    "",
    "This object represents a voice note.",
    "Field 	Type 	Description",
    "file_id 	String 	Identifier for this file",
    "duration 	Integer 	Duration of the audio in seconds as defined by sender",
    "mime_type 	String 	Optional. MIME type of the file as defined by sender",
    "file_size 	Integer 	Optional. File size",
    "VideoNote",
    "",
    "This object represents a video message (available in Telegram apps as of v.4.0).",
    "Field 	Type 	Description",
    "file_id 	String 	Identifier for this file",
    "length 	Integer 	Video width and height (diameter of the video message) as defined by sender",
    "duration 	Integer 	Duration of the video in seconds as defined by sender",
    "thumb 	PhotoSize 	Optional. Video thumbnail",
    "file_size 	Integer 	Optional. File size",
    "Contact",
    "",
    "This object represents a phone contact.",
    "Field 	Type 	Description",
    "phone_number 	String 	Contact's phone number",
    "first_name 	String 	Contact's first name",
    "last_name 	String 	Optional. Contact's last name",
    "user_id 	Integer 	Optional. Contact's user identifier in Telegram",
    "vcard 	String 	Optional. Additional data about the contact in the form of a vCard",
    "Location",
    "",
    "This object represents a point on the map.",
    "Field 	Type 	Description",
    "longitude 	Float 	Longitude as defined by sender",
    "latitude 	Float 	Latitude as defined by sender",
    "Venue",
    "",
    "This object represents a venue.",
    "Field 	Type 	Description",
    "location 	Location 	Venue location",
    "title 	String 	Name of the venue",
    "address 	String 	Address of the venue",
    "foursquare_id 	String 	Optional. Foursquare identifier of the venue",
    "foursquare_type 	String 	Optional. Foursquare type of the venue. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)",
    "PollOption",
    "",
    "This object contains information about one answer option in a poll.",
    "Field 	Type 	Description",
    "text 	String 	Option text, 1-100 characters",
    "voter_count 	Integer 	Number of users that voted for this option",
    "Poll",
    "",
    "This object contains information about a poll.",
    "Field 	Type 	Description",
    "id 	String 	Unique poll identifier",
    "question 	String 	Poll question, 1-255 characters",
    "options 	Array of PollOption 	List of poll options",
    "is_closed 	Boolean 	True, if the poll is closed",
    "UserProfilePhotos",
    "",
    "This object represent a user's profile pictures.",
    "Field 	Type 	Description",
    "total_count 	Integer 	Total number of profile pictures the target user has",
    "photos 	Array of Array of PhotoSize 	Requested profile pictures (in up to 4 sizes each)",
    "File",
    "",
    "This object represents a file ready to be downloaded. The file can be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile.",
    "",
    "    Maximum file size to download is 20 MB",
    "",
    "Field 	Type 	Description",
    "file_id 	String 	Identifier for this file",
    "file_size 	Integer 	Optional. File size, if known",
    "file_path 	String 	Optional. File path. Use https://api.telegram.org/file/bot<token>/<file_path> to get the file.",
    "ReplyKeyboardMarkup",
    "",
    "This object represents a custom keyboard with reply options (see Introduction to bots for details and examples).",
    "Field 	Type 	Description",
    "keyboard 	Array of Array of KeyboardButton 	Array of button rows, each represented by an Array of KeyboardButton objects",
    "resize_keyboard 	Boolean 	Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard.",
    "one_time_keyboard 	Boolean 	Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat – the user can press a special button in the input field to see the custom keyboard again. Defaults to false.",
    "selective 	Boolean 	Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.",
    "",
    "Example: A user requests to change the bot‘s language, bot replies to the request with a keyboard to select the new language. Other users in the group don’t see the keyboard.",
    "KeyboardButton",
    "",
    "This object represents one button of the reply keyboard. For simple text buttons String can be used instead of this object to specify text of the button. Optional fields are mutually exclusive.",
    "Field 	Type 	Description",
    "text 	String 	Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed",
    "request_contact 	Boolean 	Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only",
    "request_location 	Boolean 	Optional. If True, the user's current location will be sent when the button is pressed. Available in private chats only",
    "",
    "Note: request_contact and request_location options will only work in Telegram versions released after 9 April, 2016. Older clients will ignore them.",
    "ReplyKeyboardRemove",
    "",
    "Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup).",
    "Field 	Type 	Description",
    "remove_keyboard 	True 	Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup)",
    "selective 	Boolean 	Optional. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.",
    "",
    "Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet.",
    "InlineKeyboardMarkup",
    "",
    "This object represents an inline keyboard that appears right next to the message it belongs to.",
    "Field 	Type 	Description",
    "inline_keyboard 	Array of Array of InlineKeyboardButton 	Array of button rows, each represented by an Array of InlineKeyboardButton objects",
    "",
    "Note: This will only work in Telegram versions released after 9 April, 2016. Older clients will display unsupported message.",
    "InlineKeyboardButton",
    "",
    "This object represents one button of an inline keyboard. You must use exactly one of the optional fields.",
    "Field 	Type 	Description",
    "text 	String 	Label text on the button",
    "url 	String 	Optional. HTTP or tg:// url to be opened when button is pressed",
    "login_url 	LoginUrl 	Optional. An HTTP URL used to automatically authorize the user. Can be used as a replacement for the Telegram Login Widget.",
    "callback_data 	String 	Optional. Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes",
    "switch_inline_query 	String 	Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot‘s username and the specified inline query in the input field. Can be empty, in which case just the bot’s username will be inserted.",
    "",
    "Note: This offers an easy way for users to start using your bot in inline mode when they are currently in a private chat with it. Especially useful when combined with switch_pm… actions – in this case the user will be automatically returned to the chat they switched from, skipping the chat selection screen.",
    "switch_inline_query_current_chat 	String 	Optional. If set, pressing the button will insert the bot‘s username and the specified inline query in the current chat's input field. Can be empty, in which case only the bot’s username will be inserted.",
    "",
    "This offers a quick way for the user to open your bot in inline mode in the same chat – good for selecting something from multiple options.",
    "callback_game 	CallbackGame 	Optional. Description of the game that will be launched when the user presses the button.",
    "",
    "NOTE: This type of button must always be the first button in the first row.",
    "pay 	Boolean 	Optional. Specify True, to send a Pay button.",
    "",
    "NOTE: This type of button must always be the first button in the first row.",
    "LoginUrl",
    "",
    "This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in:",
    "TITLE",
    "",
    "Telegram apps support these buttons as of version 5.7.",
    "",
    "    Sample bot: @discussbot",
    "",
    "Field 	Type 	Description",
    "url 	String 	An HTTP URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data.",
    "",
    "NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization.",
    "forward_text 	String 	Optional. New text of the button in forwarded messages.",
    "bot_username 	String 	Optional. Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details.",
    "request_write_access 	Boolean 	Optional. Pass True to request the permission for your bot to send messages to the user.",
    "CallbackQuery",
    "",
    "This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be present. Exactly one of the fields data or game_short_name will be present.",
    "Field 	Type 	Description",
    "id 	String 	Unique identifier for this query",
    "from 	User 	Sender",
    "message 	Message 	Optional. Message with the callback button that originated the query. Note that message content and message date will not be available if the message is too old",
    "inline_message_id 	String 	Optional. Identifier of the message sent via the bot in inline mode, that originated the query.",
    "chat_instance 	String 	Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games.",
    "data 	String 	Optional. Data associated with the callback button. Be aware that a bad client can send arbitrary data in this field.",
    "game_short_name 	String 	Optional. Short name of a Game to be returned, serves as the unique identifier for the game",
    "",
    "    NOTE: After the user presses a callback button, Telegram clients will display a progress bar until you call answerCallbackQuery. It is, therefore, necessary to react by calling answerCallbackQuery even if no notification to the user is needed (e.g., without specifying any of the optional parameters).",
    "",
    "ForceReply",
    "",
    "Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot‘s message and tapped ’Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode.",
    "Field 	Type 	Description",
    "force_reply 	True 	Shows reply interface to the user, as if they manually selected the bot‘s message and tapped ’Reply'",
    "selective 	Boolean 	Optional. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply (has reply_to_message_id), sender of the original message.",
    "",
    "    Example: A poll bot for groups runs in privacy mode (only receives commands, replies to its messages and mentions). There could be two ways to create a new poll:",
    "",
    "        Explain the user how to send a command with parameters (e.g. /newpoll question answer1 answer2). May be appealing for hardcore users but lacks modern day polish.",
    "        Guide the user through a step-by-step process. ‘Please send me your question’, ‘Cool, now let’s add the first answer option‘, ’Great. Keep adding answer options, then send /done when you‘re ready’.",
    "",
    "    The last option is definitely more attractive. And if you use ForceReply in your bot‘s questions, it will receive the user’s answers even if it only receives replies, commands and mentions — without any extra work for the user.",
    "",
    "ChatPhoto",
    "",
    "This object represents a chat photo.",
    "Field 	Type 	Description",
    "small_file_id 	String 	File identifier of small (160x160) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed.",
    "big_file_id 	String 	File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed.",
    "ChatMember",
    "",
    "This object contains information about one member of a chat.",
    "Field 	Type 	Description",
    "user 	User 	Information about the user",
    "status 	String 	The member's status in the chat. Can be “creator”, “administrator”, “member”, “restricted”, “left” or “kicked”",
    "until_date 	Integer 	Optional. Restricted and kicked only. Date when restrictions will be lifted for this user; unix time",
    "can_be_edited 	Boolean 	Optional. Administrators only. True, if the bot is allowed to edit administrator privileges of that user",
    "can_post_messages 	Boolean 	Optional. Administrators only. True, if the administrator can post in the channel; channels only",
    "can_edit_messages 	Boolean 	Optional. Administrators only. True, if the administrator can edit messages of other users and can pin messages; channels only",
    "can_delete_messages 	Boolean 	Optional. Administrators only. True, if the administrator can delete messages of other users",
    "can_restrict_members 	Boolean 	Optional. Administrators only. True, if the administrator can restrict, ban or unban chat members",
    "can_promote_members 	Boolean 	Optional. Administrators only. True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by the user)",
    "can_change_info 	Boolean 	Optional. Administrators and restricted only. True, if the user is allowed to change the chat title, photo and other settings",
    "can_invite_users 	Boolean 	Optional. Administrators and restricted only. True, if the user is allowed to invite new users to the chat",
    "can_pin_messages 	Boolean 	Optional. Administrators and restricted only. True, if the user is allowed to pin messages; groups and supergroups only",
    "is_member 	Boolean 	Optional. Restricted only. True, if the user is a member of the chat at the moment of the request",
    "can_send_messages 	Boolean 	Optional. Restricted only. True, if the user is allowed to send text messages, contacts, locations and venues",
    "can_send_media_messages 	Boolean 	Optional. Restricted only. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes",
    "can_send_polls 	Boolean 	Optional. Restricted only. True, if the user is allowed to send polls",
    "can_send_other_messages 	Boolean 	Optional. Restricted only. True, if the user is allowed to send animations, games, stickers and use inline bots",
    "can_add_web_page_previews 	Boolean 	Optional. Restricted only. True, if the user is allowed to add web page previews to their messages",
    "ChatPermissions",
    "",
    "Describes actions that a non-administrator user is allowed to take in a chat.",
    "Field 	Type 	Description",
    "can_send_messages 	Boolean 	Optional. True, if the user is allowed to send text messages, contacts, locations and venues",
    "can_send_media_messages 	Boolean 	Optional. True, if the user is allowed to send audios, documents, photos, videos, video notes and voice notes, implies can_send_messages",
    "can_send_polls 	Boolean 	Optional. True, if the user is allowed to send polls, implies can_send_messages",
    "can_send_other_messages 	Boolean 	Optional. True, if the user is allowed to send animations, games, stickers and use inline bots, implies can_send_media_messages",
    "can_add_web_page_previews 	Boolean 	Optional. True, if the user is allowed to add web page previews to their messages, implies can_send_media_messages",
    "can_change_info 	Boolean 	Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups",
    "can_invite_users 	Boolean 	Optional. True, if the user is allowed to invite new users to the chat",
    "can_pin_messages 	Boolean 	Optional. True, if the user is allowed to pin messages. Ignored in public supergroups",
    "ResponseParameters",
    "",
    "Contains information about why a request was unsuccessful.",
    "Field 	Type 	Description",
    "migrate_to_chat_id 	Integer 	Optional. The group has been migrated to a supergroup with the specified identifier. This number may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier.",
    "retry_after 	Integer 	Optional. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated",
    #"InputMedia",
    #"",
    #"This object represents the content of a media message to be sent. It should be one of",
    #"",
    #"    InputMediaAnimation",
    #"    InputMediaDocument",
    #"    InputMediaAudio",
    #"    InputMediaPhoto",
    #"    InputMediaVideo",
    #"",
    "InputMediaPhoto",
    "",
    "Represents a photo to be sent.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be photo",
    "media 	String 	File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More info on Sending Files »",
    "caption 	String 	Optional. Caption of the photo to be sent, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "InputMediaVideo",
    "",
    "Represents a video to be sent.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be video",
    "media 	String 	File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More info on Sending Files »",
    "thumb 	InputFile or String 	Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can’t be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files »",
    "caption 	String 	Optional. Caption of the video to be sent, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "width 	Integer 	Optional. Video width",
    "height 	Integer 	Optional. Video height",
    "duration 	Integer 	Optional. Video duration",
    "supports_streaming 	Boolean 	Optional. Pass True, if the uploaded video is suitable for streaming",
    "InputMediaAnimation",
    "",
    "Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be animation",
    "media 	String 	File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More info on Sending Files »",
    "thumb 	InputFile or String 	Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can’t be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files »",
    "caption 	String 	Optional. Caption of the animation to be sent, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "width 	Integer 	Optional. Animation width",
    "height 	Integer 	Optional. Animation height",
    "duration 	Integer 	Optional. Animation duration",
    "InputMediaAudio",
    "",
    "Represents an audio file to be treated as music to be sent.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be audio",
    "media 	String 	File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More info on Sending Files »",
    "thumb 	InputFile or String 	Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can’t be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files »",
    "caption 	String 	Optional. Caption of the audio to be sent, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "duration 	Integer 	Optional. Duration of the audio in seconds",
    "performer 	String 	Optional. Performer of the audio",
    "title 	String 	Optional. Title of the audio",
    "InputMediaDocument",
    "",
    "Represents a general file to be sent.",
    "Field 	Type 	Description",
    "type 	String 	Type of the result, must be document",
    "media 	String 	File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass “attach://<file_attach_name>” to upload a new one using multipart/form-data under <file_attach_name> name. More info on Sending Files »",
    "thumb 	InputFile or String 	Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can’t be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files »",
    "caption 	String 	Optional. Caption of the document to be sent, 0-1024 characters",
    "parse_mode 	String 	Optional. Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption."
    ])

#call_make_structs()

def make_method(name, description_raw, fields_raw):
    struct = "".join(["///"+line+"\n" for line in description_raw])
    struct += "#[derive(Serialize, Builder, Clone)]\n"
    struct += "#[builder(setter(strip_option))]\n"
    struct += "pub struct "+name+"{\n"
    fields = []
    for field in fields_raw:
        split = field.split(" \t", 3)
        if len(split) != 4:
            #couldnt interpret line as type, add id as comment to the previous item
            fields.insert(len(fields)-2, "///"+field)
            continue
        #construct the type
        fields.append("///"+split[3])
        vartype = parse_type(split[1])

        varname = split[0]
        if varname in ["type"]:
            fields.append("#[serde(rename = \"type\")]")
            varname+="_"

        if split[2] == "Optional":
            fields.append("#[builder(default)]")
            fields.append("#[serde(skip_serializing_if = \"Option::is_none\")]")
            vartype = "Option<"+vartype+">"
        elif split[2] == "Yes":
            vartype = vartype
        else:
            panic()

        fields.append("pub "+varname+":"+vartype+",")
    struct += "    "+"\n    ".join(fields)+"\n"
    struct += "}"
    print(struct)
    print("impl TelegramMethod for "+name+"{const method_name: &'static str = \""+name+"\";}")

def make_methods(lines):
    anchors = []
    for i in range(len(lines)):
        if lines[i] == "Parameter 	Type 	Required 	Description":
            anchors.append(i)
    fields_start=[]
    for anchor in anchors:
        fields_start.append(anchor+1)
    fields_end = []
    for anchor in anchors:
        j = anchor+1
        while j < len(lines) and (lines[j] == "" or " " in lines[j]):
            j+=1
        fields_end.append(j)
    names = [0]
    for end in fields_end:
        names.append(end)
    names.pop()
    
    for i in range(len(anchors)):
        make_method(lines[names[i]],lines[names[i]+1:anchors[i]], lines[fields_start[i]:fields_end[i]])

def call_make_methods():

    print("use serde::Serialize;")
    print("use crate::helpers::Or;")
    print("use crate::telegram_types::*;")
    print("type Integer=i64;")
    print("type Boolean=bool;")
    print("type True=bool;")
    print("type Float=f64;")

    print("//unsupported types")
    print("type InputFile = ();")
    print("///Marker Trait for TelegramMethod structs")
    print("pub trait TelegramMethod {const method_name: &'static str;}")
    make_methods([
    "setWebhook",
    "",
    "Use this method to specify a url and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified url, containing a JSON-serialized Update. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns True on success.",
    "",
    "If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. https://www.example.com/<token>. Since nobody else knows your bot‘s token, you can be pretty sure it’s us.",
    "Parameter 	Type 	Required 	Description",
    "url 	String 	Yes 	HTTPS url to send updates to. Use an empty string to remove webhook integration",
    "certificate 	InputFile 	Optional 	Upload your public key certificate so that the root certificate in use can be checked. See our self-signed guide for details.",
    "max_connections 	Integer 	Optional 	Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery, 1-100. Defaults to 40. Use lower values to limit the load on your bot‘s server, and higher values to increase your bot’s throughput.",
    "allowed_updates 	Array of String 	Optional 	List the types of updates you want your bot to receive. For example, specify [“message”, “edited_channel_post”, “callback_query”] to only receive updates of these types. See Update for a complete list of available update types. Specify an empty list to receive all updates regardless of type (default). If not specified, the previous setting will be used.",
    "",
    "Please note that this parameter doesn't affect updates created before the call to the setWebhook, so unwanted updates may be received for a short period of time.",
    "",
    "    Notes",
    "    1. You will not be able to receive updates using getUpdates for as long as an outgoing webhook is set up.",
    "    2. To use a self-signed certificate, you need to upload your public key certificate using certificate parameter. Please upload as InputFile, sending a String will not work.",
    "    3. Ports currently supported for Webhooks: 443, 80, 88, 8443.",
    "",
    "    NEW! If you're having any trouble setting up webhooks, please check out this amazing guide to Webhooks.",
    "",
    "deleteWebhook",
    "",
    "Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns True on success. Requires no parameters.",
    "Parameter 	Type 	Required 	Description",
    "getWebhookInfo",
    "",
    "Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using getUpdates, will return an object with the url field empty.",
    "Parameter 	Type 	Required 	Description",
    "WebhookInfo",
    "",
    "Contains information about the current status of a webhook.",
    "Field 	Type 	Description",
    "url 	String 	Webhook URL, may be empty if webhook is not set up",
    "has_custom_certificate 	Boolean 	True, if a custom certificate was provided for webhook certificate checks",
    "pending_update_count 	Integer 	Number of updates awaiting delivery",
    "last_error_date 	Integer 	Optional. Unix time for the most recent error that happened when trying to deliver an update via webhook",
    "last_error_message 	String 	Optional. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook",
    "max_connections 	Integer 	Optional. Maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery",
    "allowed_updates 	Array of String 	Optional. A list of update types the bot is subscribed to. Defaults to all update types",
    "getMe",
    "",
    "A simple method for testing your bot's auth token. Requires no parameters. Returns basic information about the bot in form of a User object.",
    "Parameter 	Type 	Required 	Description",
    "sendMessage",
    "",
    "Use this method to send text messages. On success, the sent Message is returned.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "text 	String 	Yes 	Text of the message to be sent",
    "parse_mode 	String 	Optional 	Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your bot's message.",
    "disable_web_page_preview 	Boolean 	Optional 	Disables link previews for links in this message",
    "disable_notification 	Boolean 	Optional 	Sends the message silently. Users will receive a notification with no sound.",
    "reply_to_message_id 	Integer 	Optional 	If the message is a reply, ID of the original message",
    "reply_markup 	InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply 	Optional 	Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.",
    "Formatting options",
    "",
    "The Bot API supports basic formatting for messages. You can use bold and italic text, as well as inline links and pre-formatted code in your bots' messages. Telegram clients will render them accordingly. You can use either markdown-style or HTML-style formatting.",
    "",
    "Note that Telegram clients will display an alert to the user before opening an inline link (‘Open this link?’ together with the full URL).",
    "",
    "Links tg://user?id=<user_id> can be used to mention a user by their id without using a username. Please note:",
    "",
    "    These links will work only if they are used inside an inline link. For example, they will not work, when used in an inline keyboard button or in a message text.",
    "    These mentions are only guaranteed to work if the user has contacted the bot in the past, has sent a callback query to the bot via inline button or is a member in the group where he was mentioned.",
    "",
    "Markdown style",
    "",
    "To use this mode, pass Markdown in the parse_mode field when using sendMessage. Use the following syntax in your message:",
    "",
    "*bold text*",
    "_italic text_",
    "[inline URL](http://www.example.com/)",
    "[inline mention of a user](tg://user?id=123456789)",
    "`inline fixed-width code`",
    "```block_language",
    "pre-formatted fixed-width code block",
    "```",
    "",
    "HTML style",
    "",
    "To use this mode, pass HTML in the parse_mode field when using sendMessage. The following tags are currently supported:",
    "",
    "<b>bold</b>, <strong>bold</strong>",
    "<i>italic</i>, <em>italic</em>",
    "<a href=\"http://www.example.com/\">inline URL</a>",
    "<a href=\"tg://user?id=123456789\">inline mention of a user</a>",
    "<code>inline fixed-width code</code>",
    "<pre>pre-formatted fixed-width code block</pre>",
    "",
    "Please note:",
    "",
    "    Only the tags mentioned above are currently supported.",
    "    Tags must not be nested.",
    "    All <, > and & symbols that are not a part of a tag or an HTML entity must be replaced with the corresponding HTML entities (< with &lt;, > with &gt; and & with &amp;).",
    "    All numerical HTML entities are supported.",
    "    The API currently supports only the following named HTML entities: &lt;, &gt;, &amp; and &quot;.",
    "",
    "forwardMessage",
    "",
    "Use this method to forward messages of any kind. On success, the sent Message is returned.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "from_chat_id 	Integer or String 	Yes 	Unique identifier for the chat where the original message was sent (or channel username in the format @channelusername)",
    "disable_notification 	Boolean 	Optional 	Sends the message silently. Users will receive a notification with no sound.",
    "message_id 	Integer 	Yes 	Message identifier in the chat specified in from_chat_id",
    "sendPhoto",
    "",
    "Use this method to send photos. On success, the sent Message is returned.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "photo 	InputFile or String 	Yes 	Photo to send. Pass a file_id as String to send a photo that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a photo from the Internet, or upload a new photo using multipart/form-data. More info on Sending Files »",
    "caption 	String 	Optional 	Photo caption (may also be used when resending photos by file_id), 0-1024 characters",
    "parse_mode 	String 	Optional 	Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "disable_notification 	Boolean 	Optional 	Sends the message silently. Users will receive a notification with no sound.",
    "reply_to_message_id 	Integer 	Optional 	If the message is a reply, ID of the original message",
    "reply_markup 	InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply 	Optional 	Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.",
    "sendAudio",
    "",
    "Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future.",
    "",
    "For sending voice messages, use the sendVoice method instead.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "audio 	InputFile or String 	Yes 	Audio file to send. Pass a file_id as String to send an audio file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an audio file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »",
    "caption 	String 	Optional 	Audio caption, 0-1024 characters",
    "parse_mode 	String 	Optional 	Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "duration 	Integer 	Optional 	Duration of the audio in seconds",
    "performer 	String 	Optional 	Performer",
    "title 	String 	Optional 	Track name",
    "thumb 	InputFile or String 	Optional 	Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can’t be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files »",
    "disable_notification 	Boolean 	Optional 	Sends the message silently. Users will receive a notification with no sound.",
    "reply_to_message_id 	Integer 	Optional 	If the message is a reply, ID of the original message",
    "reply_markup 	InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply 	Optional 	Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.",
    "sendDocument",
    "",
    "Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "document 	InputFile or String 	Yes 	File to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »",
    "thumb 	InputFile or String 	Optional 	Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can’t be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files »",
    "caption 	String 	Optional 	Document caption (may also be used when resending documents by file_id), 0-1024 characters",
    "parse_mode 	String 	Optional 	Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "disable_notification 	Boolean 	Optional 	Sends the message silently. Users will receive a notification with no sound.",
    "reply_to_message_id 	Integer 	Optional 	If the message is a reply, ID of the original message",
    "reply_markup 	InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply 	Optional 	Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.",
    "sendVideo",
    "",
    "Use this method to send video files, Telegram clients support mp4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "video 	InputFile or String 	Yes 	Video to send. Pass a file_id as String to send a video that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a video from the Internet, or upload a new video using multipart/form-data. More info on Sending Files »",
    "duration 	Integer 	Optional 	Duration of sent video in seconds",
    "width 	Integer 	Optional 	Video width",
    "height 	Integer 	Optional 	Video height",
    "thumb 	InputFile or String 	Optional 	Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can’t be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files »",
    "caption 	String 	Optional 	Video caption (may also be used when resending videos by file_id), 0-1024 characters",
    "parse_mode 	String 	Optional 	Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "supports_streaming 	Boolean 	Optional 	Pass True, if the uploaded video is suitable for streaming",
    "disable_notification 	Boolean 	Optional 	Sends the message silently. Users will receive a notification with no sound.",
    "reply_to_message_id 	Integer 	Optional 	If the message is a reply, ID of the original message",
    "reply_markup 	InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply 	Optional 	Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.",
    "sendAnimation",
    "",
    "Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "animation 	InputFile or String 	Yes 	Animation to send. Pass a file_id as String to send an animation that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get an animation from the Internet, or upload a new animation using multipart/form-data. More info on Sending Files »",
    "duration 	Integer 	Optional 	Duration of sent animation in seconds",
    "width 	Integer 	Optional 	Animation width",
    "height 	Integer 	Optional 	Animation height",
    "thumb 	InputFile or String 	Optional 	Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can’t be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files »",
    "caption 	String 	Optional 	Animation caption (may also be used when resending animation by file_id), 0-1024 characters",
    "parse_mode 	String 	Optional 	Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "disable_notification 	Boolean 	Optional 	Sends the message silently. Users will receive a notification with no sound.",
    "reply_to_message_id 	Integer 	Optional 	If the message is a reply, ID of the original message",
    "reply_markup 	InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply 	Optional 	Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.",
    "sendVoice",
    "",
    "Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .ogg file encoded with OPUS (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "voice 	InputFile or String 	Yes 	Audio file to send. Pass a file_id as String to send a file that exists on the Telegram servers (recommended), pass an HTTP URL as a String for Telegram to get a file from the Internet, or upload a new one using multipart/form-data. More info on Sending Files »",
    "caption 	String 	Optional 	Voice message caption, 0-1024 characters",
    "parse_mode 	String 	Optional 	Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in the media caption.",
    "duration 	Integer 	Optional 	Duration of the voice message in seconds",
    "disable_notification 	Boolean 	Optional 	Sends the message silently. Users will receive a notification with no sound.",
    "reply_to_message_id 	Integer 	Optional 	If the message is a reply, ID of the original message",
    "reply_markup 	InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply 	Optional 	Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.",
    "sendVideoNote",
    "",
    "As of v.4.0, Telegram clients support rounded square mp4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "video_note 	InputFile or String 	Yes 	Video note to send. Pass a file_id as String to send a video note that exists on the Telegram servers (recommended) or upload a new video using multipart/form-data. More info on Sending Files ». Sending video notes by a URL is currently unsupported",
    "duration 	Integer 	Optional 	Duration of sent video in seconds",
    "length 	Integer 	Optional 	Video width and height, i.e. diameter of the video message",
    "thumb 	InputFile or String 	Optional 	Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail‘s width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can’t be reused and can be only uploaded as a new file, so you can pass “attach://<file_attach_name>” if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More info on Sending Files »",
    "disable_notification 	Boolean 	Optional 	Sends the message silently. Users will receive a notification with no sound.",
    "reply_to_message_id 	Integer 	Optional 	If the message is a reply, ID of the original message",
    "reply_markup 	InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply 	Optional 	Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.",
    "sendMediaGroup",
    "",
    "Use this method to send a group of photos or videos as an album. On success, an array of the sent Messages is returned.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "media 	Array of InputMediaPhoto and InputMediaVideo 	Yes 	A JSON-serialized array describing photos and videos to be sent, must include 2–10 items",
    "disable_notification 	Boolean 	Optional 	Sends the messages silently. Users will receive a notification with no sound.",
    "reply_to_message_id 	Integer 	Optional 	If the messages are a reply, ID of the original message",
    "sendLocation",
    "",
    "Use this method to send point on the map. On success, the sent Message is returned.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "latitude 	Float number 	Yes 	Latitude of the location",
    "longitude 	Float number 	Yes 	Longitude of the location",
    "live_period 	Integer 	Optional 	Period in seconds for which the location will be updated (see Live Locations, should be between 60 and 86400.",
    "disable_notification 	Boolean 	Optional 	Sends the message silently. Users will receive a notification with no sound.",
    "reply_to_message_id 	Integer 	Optional 	If the message is a reply, ID of the original message",
    "reply_markup 	InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply 	Optional 	Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.",
    "editMessageLiveLocation",
    "",
    "Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message was sent by the bot, the edited Message is returned, otherwise True is returned.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Optional 	Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "message_id 	Integer 	Optional 	Required if inline_message_id is not specified. Identifier of the message to edit",
    "inline_message_id 	String 	Optional 	Required if chat_id and message_id are not specified. Identifier of the inline message",
    "latitude 	Float number 	Yes 	Latitude of new location",
    "longitude 	Float number 	Yes 	Longitude of new location",
    "reply_markup 	InlineKeyboardMarkup 	Optional 	A JSON-serialized object for a new inline keyboard.",
    "stopMessageLiveLocation",
    "",
    "Use this method to stop updating a live location message before live_period expires. On success, if the message was sent by the bot, the sent Message is returned, otherwise True is returned.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Optional 	Required if inline_message_id is not specified. Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "message_id 	Integer 	Optional 	Required if inline_message_id is not specified. Identifier of the message with live location to stop",
    "inline_message_id 	String 	Optional 	Required if chat_id and message_id are not specified. Identifier of the inline message",
    "reply_markup 	InlineKeyboardMarkup 	Optional 	A JSON-serialized object for a new inline keyboard.",
    "sendVenue",
    "",
    "Use this method to send information about a venue. On success, the sent Message is returned.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "latitude 	Float number 	Yes 	Latitude of the venue",
    "longitude 	Float number 	Yes 	Longitude of the venue",
    "title 	String 	Yes 	Name of the venue",
    "address 	String 	Yes 	Address of the venue",
    "foursquare_id 	String 	Optional 	Foursquare identifier of the venue",
    "foursquare_type 	String 	Optional 	Foursquare type of the venue, if known. (For example, “arts_entertainment/default”, “arts_entertainment/aquarium” or “food/icecream”.)",
    "disable_notification 	Boolean 	Optional 	Sends the message silently. Users will receive a notification with no sound.",
    "reply_to_message_id 	Integer 	Optional 	If the message is a reply, ID of the original message",
    "reply_markup 	InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply 	Optional 	Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.",
    "sendContact",
    "",
    "Use this method to send phone contacts. On success, the sent Message is returned.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "phone_number 	String 	Yes 	Contact's phone number",
    "first_name 	String 	Yes 	Contact's first name",
    "last_name 	String 	Optional 	Contact's last name",
    "vcard 	String 	Optional 	Additional data about the contact in the form of a vCard, 0-2048 bytes",
    "disable_notification 	Boolean 	Optional 	Sends the message silently. Users will receive a notification with no sound.",
    "reply_to_message_id 	Integer 	Optional 	If the message is a reply, ID of the original message",
    "reply_markup 	InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply 	Optional 	Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove keyboard or to force a reply from the user.",
    "sendPoll",
    "",
    "Use this method to send a native poll. A native poll can't be sent to a private chat. On success, the sent Message is returned.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername). A native poll can't be sent to a private chat.",
    "question 	String 	Yes 	Poll question, 1-255 characters",
    "options 	Array of String 	Yes 	List of answer options, 2-10 strings 1-100 characters each",
    "disable_notification 	Boolean 	Optional 	Sends the message silently. Users will receive a notification with no sound.",
    "reply_to_message_id 	Integer 	Optional 	If the message is a reply, ID of the original message",
    "reply_markup 	InlineKeyboardMarkup or ReplyKeyboardMarkup or ReplyKeyboardRemove or ForceReply 	Optional 	Additional interface options. A JSON-serialized object for an inline keyboard, custom reply keyboard, instructions to remove reply keyboard or to force a reply from the user.",
    "sendChatAction",
    "",
    "Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success.",
    "",
    "    Example: The ImageBot needs some time to process a request and upload the image. Instead of sending a text message along the lines of “Retrieving image, please wait…”, the bot may use sendChatAction with action = upload_photo. The user will see a “sending photo” status for the bot.",
    "",
    "We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "action 	String 	Yes 	Type of action to broadcast. Choose one, depending on what the user is about to receive: typing for text messages, upload_photo for photos, record_video or upload_video for videos, record_audio or upload_audio for audio files, upload_document for general files, find_location for location data, record_video_note or upload_video_note for video notes.",
    "getUserProfilePhotos",
    "",
    "Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object.",
    "Parameter 	Type 	Required 	Description",
    "user_id 	Integer 	Yes 	Unique identifier of the target user",
    "offset 	Integer 	Optional 	Sequential number of the first photo to be returned. By default, all photos are returned.",
    "limit 	Integer 	Optional 	Limits the number of photos to be retrieved. Values between 1—100 are accepted. Defaults to 100.",
    "getFile",
    "",
    "Use this method to get basic info about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>, where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again.",
    "Parameter 	Type 	Required 	Description",
    "file_id 	String 	Yes 	File identifier to get info about",
    "",
    "Note: This function may not preserve the original file name and MIME type. You should save the file's MIME type and name (if available) when the File object is received.",
    "kickChatMember",
    "",
    "Use this method to kick a user from a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the group on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target group or username of the target supergroup or channel (in the format @channelusername)",
    "user_id 	Integer 	Yes 	Unique identifier of the target user",
    "until_date 	Integer 	Optional 	Date when the user will be unbanned, unix time. If user is banned for more than 366 days or less than 30 seconds from the current time they are considered to be banned forever",
    "unbanChatMember",
    "",
    "Use this method to unban a previously kicked user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. Returns True on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target group or username of the target supergroup or channel (in the format @username)",
    "user_id 	Integer 	Yes 	Unique identifier of the target user",
    "restrictChatMember",
    "",
    "Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate admin rights. Pass True for all permissions to lift restrictions from a user. Returns True on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
    "user_id 	Integer 	Yes 	Unique identifier of the target user",
    "permissions 	ChatPermissions 	Yes 	New user permissions",
    "until_date 	Integer 	Optional 	Date when restrictions will be lifted for the user, unix time. If user is restricted for more than 366 days or less than 30 seconds from the current time, they are considered to be restricted forever",
    "promoteChatMember",
    "",
    "Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Pass False for all boolean parameters to demote a user. Returns True on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "user_id 	Integer 	Yes 	Unique identifier of the target user",
    "can_change_info 	Boolean 	Optional 	Pass True, if the administrator can change chat title, photo and other settings",
    "can_post_messages 	Boolean 	Optional 	Pass True, if the administrator can create channel posts, channels only",
    "can_edit_messages 	Boolean 	Optional 	Pass True, if the administrator can edit messages of other users and can pin messages, channels only",
    "can_delete_messages 	Boolean 	Optional 	Pass True, if the administrator can delete messages of other users",
    "can_invite_users 	Boolean 	Optional 	Pass True, if the administrator can invite new users to the chat",
    "can_restrict_members 	Boolean 	Optional 	Pass True, if the administrator can restrict, ban or unban chat members",
    "can_pin_messages 	Boolean 	Optional 	Pass True, if the administrator can pin messages, supergroups only",
    "can_promote_members 	Boolean 	Optional 	Pass True, if the administrator can add new administrators with a subset of his own privileges or demote administrators that he has promoted, directly or indirectly (promoted by administrators that were appointed by him)",
    "setChatPermissions",
    "",
    "Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members admin rights. Returns True on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
    "permissions 	ChatPermissions 	Yes 	New default chat permissions",
    "exportChatInviteLink",
    "",
    "Use this method to generate a new invite link for a chat; any previously generated link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns the new invite link as String on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "",
    "    Note: Each administrator in a chat generates their own invite links. Bots can't use invite links generated by other administrators. If you want your bot to work with invite links, it will need to generate its own link using exportChatInviteLink – after this the link will become available to the bot via the getChat method. If your bot needs to generate a new invite link replacing its previous one, use exportChatInviteLink again.",
    "",
    "setChatPhoto",
    "",
    "Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "photo 	InputFile 	Yes 	New chat photo, uploaded using multipart/form-data",
    "deleteChatPhoto",
    "",
    "Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "setChatTitle",
    "",
    "Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "title 	String 	Yes 	New chat title, 1-255 characters",
    "setChatDescription",
    "",
    "Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Returns True on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "description 	String 	Optional 	New chat description, 0-255 characters",
    "pinChatMessage",
    "",
    "Use this method to pin a message in a group, a supergroup, or a channel. The bot must be an administrator in the chat for this to work and must have the ‘can_pin_messages’ admin right in the supergroup or ‘can_edit_messages’ admin right in the channel. Returns True on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "message_id 	Integer 	Yes 	Identifier of a message to pin",
    "disable_notification 	Boolean 	Optional 	Pass True, if it is not necessary to send a notification to all chat members about the new pinned message. Notifications are always disabled in channels.",
    "unpinChatMessage",
    "",
    "Use this method to unpin a message in a group, a supergroup, or a channel. The bot must be an administrator in the chat for this to work and must have the ‘can_pin_messages’ admin right in the supergroup or ‘can_edit_messages’ admin right in the channel. Returns True on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target channel (in the format @channelusername)",
    "leaveChat",
    "",
    "Use this method for your bot to leave a group, supergroup or channel. Returns True on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)",
    "getChat",
    "",
    "Use this method to get up to date information about the chat (current name of the user for one-on-one conversations, current username of a user, group or channel, etc.). Returns a Chat object on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)",
    "getChatAdministrators",
    "",
    "Use this method to get a list of administrators in a chat. On success, returns an Array of ChatMember objects that contains information about all chat administrators except other bots. If the chat is a group or a supergroup and no administrators were appointed, only the creator will be returned.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)",
    "getChatMembersCount",
    "",
    "Use this method to get the number of members in a chat. Returns Int on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)",
    "getChatMember",
    "",
    "Use this method to get information about a member of a chat. Returns a ChatMember object on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target supergroup or channel (in the format @channelusername)",
    "user_id 	Integer 	Yes 	Unique identifier of the target user",
    "setChatStickerSet",
    "",
    "Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
    "sticker_set_name 	String 	Yes 	Name of the sticker set to be set as the group sticker set",
    "deleteChatStickerSet",
    "",
    "Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate admin rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success.",
    "Parameter 	Type 	Required 	Description",
    "chat_id 	Integer or String 	Yes 	Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername)",
    "answerCallbackQuery",
    "",
    "Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned.",
    "",
    "    Alternatively, the user can be redirected to the specified Game URL. For this option to work, you must first create a game for your bot via @Botfather and accept the terms. Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter.",
    "",
    "Parameter 	Type 	Required 	Description",
    "callback_query_id 	String 	Yes 	Unique identifier for the query to be answered",
    "text 	String 	Optional 	Text of the notification. If not specified, nothing will be shown to the user, 0-200 characters",
    "show_alert 	Boolean 	Optional 	If true, an alert will be shown by the client instead of a notification at the top of the chat screen. Defaults to false.",
    "url 	String 	Optional 	URL that will be opened by the user's client. If you have created a Game and accepted the conditions via @Botfather, specify the URL that opens your game – note that this will only work if the query comes from a callback_game button.",
    "",
    "Otherwise, you may use links like t.me/your_bot?start=XXXX that open your bot with a parameter.",
    "cache_time 	Integer 	Optional 	The maximum amount of time in seconds that the result of the callback query may be cached client-side. Telegram apps will support caching starting in version 3.14. Defaults to 0."
    ])

call_make_methods()
